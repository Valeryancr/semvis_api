-- =========================================================
-- V1__init.sql (PostgreSQL 17) - semvis_sk
-- =========================================================

CREATE SCHEMA IF NOT EXISTS semvis_sk;
CREATE EXTENSION IF NOT EXISTS citext;

-- ===== ENUMs =====
DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname='role_name') THEN
    CREATE TYPE semvis_sk.role_name AS ENUM ('ADMIN','SUPERVISOR','TECNICO','CLIENTE');
  END IF;
  IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname='visit_state') THEN
    CREATE TYPE semvis_sk.visit_state AS ENUM ('PROGRAMADA','EN_CURSO','COMPLETADA','CANCELADA');
  END IF;
  IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname='visit_event_type') THEN
    CREATE TYPE semvis_sk.visit_event_type AS ENUM ('CHECKIN','CHECKOUT');
  END IF;
END$$;

-- ===== Utilidades auditoría =====
CREATE OR REPLACE FUNCTION semvis_sk.current_app_username() RETURNS CITEXT
LANGUAGE plpgsql STABLE AS $$
DECLARE v CITEXT;
BEGIN
  BEGIN
    v := current_setting('semvis_sk.app_username')::citext;
  EXCEPTION WHEN others THEN
    v := NULL;
  END;
  RETURN v;
END$$;

CREATE OR REPLACE FUNCTION semvis_sk.audit_touch_both_username()
RETURNS TRIGGER LANGUAGE plpgsql AS $$
DECLARE u CITEXT := semvis_sk.current_app_username();
BEGIN
  IF TG_OP = 'INSERT' THEN
    IF NEW.created_at IS NULL THEN NEW.created_at := NOW(); END IF;
    IF NEW.updated_at IS NULL THEN NEW.updated_at := NOW(); END IF;
    IF u IS NOT NULL AND NEW.created_by IS NULL THEN NEW.created_by := u; END IF;
    IF u IS NOT NULL AND NEW.updated_by IS NULL THEN NEW.updated_by := u; END IF;
  ELSE
    NEW.updated_at := NOW();
    IF u IS NOT NULL THEN NEW.updated_by := u; END IF;
  END IF;
  RETURN NEW;
END$$;

-- ===== Seguridad: user / role / user_role =====
CREATE TABLE IF NOT EXISTS semvis_sk."user" (
  id               BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  username         CITEXT NOT NULL UNIQUE,
  email            CITEXT NOT NULL UNIQUE,
  pass_hash        TEXT   NOT NULL,

  primer_nombre    TEXT   NOT NULL,
  segundo_nombre   TEXT,
  apellido1        TEXT   NOT NULL,
  apellido2        TEXT,
  apellido_casada  TEXT,

  nombre_completo  TEXT,

  estado           BOOLEAN NOT NULL DEFAULT TRUE,
  last_login_at    TIMESTAMPTZ,
  reset_token      TEXT,
  reset_expires    TIMESTAMPTZ,

  -- Seguridad adicional
  login_attempts   SMALLINT NOT NULL DEFAULT 0,
  locked_until     TIMESTAMPTZ,
  password_changed_at TIMESTAMPTZ DEFAULT NOW(),

  created_by       CITEXT,
  updated_by       CITEXT,
  created_at       TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at       TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Trigger: calcular nombre_completo
CREATE OR REPLACE FUNCTION semvis_sk.user_compute_fullname()
RETURNS TRIGGER LANGUAGE plpgsql AS $$
BEGIN
  NEW.nombre_completo :=
    btrim(
      regexp_replace(
        coalesce(btrim(NEW.primer_nombre),'') || ' ' ||
        coalesce(btrim(NEW.segundo_nombre),'') || ' ' ||
        coalesce(btrim(NEW.apellido1),'') || ' ' ||
        coalesce(btrim(NEW.apellido2),'') || ' ' ||
        coalesce(btrim(NEW.apellido_casada),''),
        '\s+', ' ', 'g'
      )
    );
  RETURN NEW;
END$$;

DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_trigger WHERE tgname='trg_user_fullname') THEN
    CREATE TRIGGER trg_user_fullname
    BEFORE INSERT OR UPDATE OF primer_nombre, segundo_nombre, apellido1, apellido2, apellido_casada
    ON semvis_sk."user"
    FOR EACH ROW EXECUTE FUNCTION semvis_sk.user_compute_fullname();
  END IF;
END$$;

DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_trigger WHERE tgname='trg_user_audit') THEN
    CREATE TRIGGER trg_user_audit
    BEFORE INSERT OR UPDATE ON semvis_sk."user"
    FOR EACH ROW EXECUTE FUNCTION semvis_sk.audit_touch_both_username();
  END IF;
END$$;

CREATE TABLE IF NOT EXISTS semvis_sk.role (
  id          SMALLSERIAL PRIMARY KEY,
  nombre      semvis_sk.role_name UNIQUE NOT NULL,
  created_by  CITEXT,
  updated_by  CITEXT,
  created_at  TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at  TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_trigger WHERE tgname='trg_role_audit') THEN
    CREATE TRIGGER trg_role_audit
    BEFORE INSERT OR UPDATE ON semvis_sk.role
    FOR EACH ROW EXECUTE FUNCTION semvis_sk.audit_touch_both_username();
  END IF;
END$$;

CREATE TABLE IF NOT EXISTS semvis_sk.user_role (
  user_id     BIGINT REFERENCES semvis_sk."user"(id) ON DELETE CASCADE,
  role        semvis_sk.role_name NOT NULL,
  created_by  CITEXT,
  created_at  TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  PRIMARY KEY (user_id, role),
  CONSTRAINT fk_user_role_role FOREIGN KEY (role) REFERENCES semvis_sk.role(nombre) ON DELETE RESTRICT
);

CREATE INDEX IF NOT EXISTS idx_user_email    ON semvis_sk."user"(email);
CREATE INDEX IF NOT EXISTS idx_user_username ON semvis_sk."user"(username);

-- ===== Jerarquía Supervisor-Técnico =====
CREATE TABLE semvis_sk.user_supervisor (
  supervisor_id BIGINT NOT NULL,
  tecnico_id BIGINT NOT NULL,
  PRIMARY KEY (supervisor_id, tecnico_id),
  CONSTRAINT fk_supervisor FOREIGN KEY (supervisor_id) REFERENCES semvis_sk."user"(id) ON DELETE CASCADE,
  CONSTRAINT fk_tecnico FOREIGN KEY (tecnico_id) REFERENCES semvis_sk."user"(id) ON DELETE CASCADE,
  CONSTRAINT chk_not_same CHECK (supervisor_id <> tecnico_id)
);

CREATE UNIQUE INDEX user_supervisor_no_circular
ON semvis_sk.user_supervisor(LEAST(supervisor_id, tecnico_id), GREATEST(supervisor_id, tecnico_id));

-- ===== Catálogo territorial =====
CREATE TABLE IF NOT EXISTS semvis_sk.departamento (
  id          SMALLSERIAL PRIMARY KEY,
  nombre      TEXT NOT NULL UNIQUE,
  created_by  CITEXT,
  updated_by  CITEXT,
  created_at  TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at  TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS semvis_sk.municipio (
  id               SERIAL PRIMARY KEY,
  departamento_id  SMALLINT NOT NULL REFERENCES semvis_sk.departamento(id) ON DELETE RESTRICT,
  nombre           TEXT NOT NULL,
  created_by       CITEXT,
  updated_by       CITEXT,
  created_at       TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at       TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  CONSTRAINT uq_municipio_por_dep UNIQUE (departamento_id, nombre),
  CONSTRAINT uq_municipio_id_depto UNIQUE (id, departamento_id)
);

-- ===== Dirección =====
CREATE TABLE IF NOT EXISTS semvis_sk.direccion (
  id               BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  departamento_id  SMALLINT NOT NULL REFERENCES semvis_sk.departamento(id) ON DELETE RESTRICT,
  municipio_id     INTEGER  NOT NULL REFERENCES semvis_sk.municipio(id) ON DELETE RESTRICT,
  CONSTRAINT fk_direccion_muni_dep_match
    FOREIGN KEY (municipio_id, departamento_id)
    REFERENCES semvis_sk.municipio (id, departamento_id)
    ON DELETE RESTRICT,
  zona             SMALLINT,
  linea1           TEXT NOT NULL,
  linea2           TEXT,
  nivel            TEXT,
  piso             TEXT,
  referencia       TEXT,
  codigo_postal    TEXT,
  lat              NUMERIC(9,6),
  lon              NUMERIC(9,6),
  direccion_fmt    TEXT NOT NULL,
  created_by       CITEXT,
  updated_by       CITEXT,
  created_at       TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at       TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  CONSTRAINT chk_lat CHECK (lat IS NULL OR (lat BETWEEN -90 AND 90)),
  CONSTRAINT chk_lon CHECK (lon IS NULL OR (lon BETWEEN -180 AND 180)),
  CONSTRAINT chk_zona CHECK (zona IS NULL OR zona BETWEEN 0 AND 99)
);

CREATE INDEX IF NOT EXISTS idx_direccion_geo  ON semvis_sk.direccion (lat, lon);
CREATE INDEX IF NOT EXISTS idx_direccion_muni ON semvis_sk.direccion (municipio_id, zona);

-- ===== Cliente =====
CREATE TABLE IF NOT EXISTS semvis_sk.cliente (
  id             BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id        BIGINT UNIQUE REFERENCES semvis_sk."user"(id) ON DELETE SET NULL,
  nombre         TEXT NOT NULL,
  nit            TEXT,
  telefono       TEXT,
  direccion_id   BIGINT REFERENCES semvis_sk.direccion(id) ON DELETE SET NULL,
  created_by     CITEXT,
  updated_by     CITEXT,
  created_at     TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at     TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE UNIQUE INDEX IF NOT EXISTS uq_cliente_nit_notnull ON semvis_sk.cliente(nit) WHERE nit IS NOT NULL;
CREATE INDEX IF NOT EXISTS idx_cliente_nombre    ON semvis_sk.cliente USING gin (to_tsvector('simple', nombre));
CREATE INDEX IF NOT EXISTS idx_cliente_direccion ON semvis_sk.cliente (direccion_id);

-- ===== Visitas, eventos y reportes =====
CREATE TABLE IF NOT EXISTS semvis_sk.visita (
  id               BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  cliente_id       BIGINT NOT NULL REFERENCES semvis_sk.cliente(id) ON DELETE RESTRICT,
  supervisor_id    BIGINT REFERENCES semvis_sk."user"(id) ON DELETE SET NULL,
  tecnico_id       BIGINT REFERENCES semvis_sk."user"(id) ON DELETE SET NULL,
  fecha_programada TIMESTAMPTZ NOT NULL,
  estado           semvis_sk.visit_state NOT NULL DEFAULT 'PROGRAMADA',
  observaciones_plan TEXT,
  completed_at     TIMESTAMPTZ,
  created_by       CITEXT,
  updated_by       CITEXT,
  created_at       TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at       TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS semvis_sk.visita_evento (
  id         BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  visita_id  BIGINT NOT NULL REFERENCES semvis_sk.visita(id) ON DELETE CASCADE,
  tipo       semvis_sk.visit_event_type NOT NULL,
  fecha      TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  lat        NUMERIC(9,6),
  lon        NUMERIC(9,6),
  nota       TEXT,
  created_by CITEXT,
  updated_by CITEXT,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE UNIQUE INDEX IF NOT EXISTS uq_evento_por_tipo ON semvis_sk.visita_evento (visita_id, tipo);
CREATE INDEX IF NOT EXISTS idx_eventos_visita_fecha ON semvis_sk.visita_evento (visita_id, fecha DESC);
CREATE INDEX IF NOT EXISTS idx_eventos_geo          ON semvis_sk.visita_evento (lat, lon);

CREATE TABLE IF NOT EXISTS semvis_sk.visita_reporte (
  id            BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  visita_id     BIGINT NOT NULL REFERENCES semvis_sk.visita(id) ON DELETE CASCADE,
  storage_url   TEXT,
  pdf_blob      BYTEA,
  enviado_email BOOLEAN NOT NULL DEFAULT FALSE,
  sent_at       TIMESTAMPTZ,
  created_by    CITEXT,
  updated_by    CITEXT,
  created_at    TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at    TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- ===== Auditoría libre =====
CREATE TABLE IF NOT EXISTS semvis_sk.audit_log (
  id          BIGSERIAL PRIMARY KEY,
  usuario     CITEXT,
  accion      TEXT NOT NULL,
  entidad     TEXT NOT NULL,
  entidad_id  BIGINT,
  ts          TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  ip          INET,
  detalles    JSONB,
  accion_detalle TEXT
);

-- ===== Refresh Tokens =====
CREATE TABLE IF NOT EXISTS semvis_sk.refresh_token (
  id           BIGSERIAL PRIMARY KEY,
  user_id      BIGINT NOT NULL REFERENCES semvis_sk."user"(id) ON DELETE CASCADE,
  token        TEXT NOT NULL UNIQUE,
  issued_at    TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  expires_at   TIMESTAMPTZ NOT NULL,
  revoked      BOOLEAN NOT NULL DEFAULT FALSE,
  created_by   CITEXT,
  created_at   TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at   TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE INDEX IF NOT EXISTS idx_refresh_token_user ON semvis_sk.refresh_token(user_id);
CREATE INDEX IF NOT EXISTS idx_refresh_token_exp  ON semvis_sk.refresh_token(expires_at);

-- ===== Trigger: sincronizar nombre de cliente con user =====
CREATE OR REPLACE FUNCTION semvis_sk.sync_cliente_nombre()
RETURNS TRIGGER LANGUAGE plpgsql AS $$
BEGIN
  UPDATE semvis_sk.cliente c
  SET nombre = NEW.nombre_completo
  WHERE c.user_id = NEW.id;
  RETURN NEW;
END$$;

CREATE TRIGGER trg_user_sync_cliente
AFTER UPDATE OF primer_nombre, segundo_nombre, apellido1, apellido2, apellido_casada
ON semvis_sk."user"
FOR EACH ROW EXECUTE FUNCTION semvis_sk.sync_cliente_nombre();

-- ===== Vista tablero =====
CREATE OR REPLACE VIEW semvis_sk.v_visita_resumen AS
SELECT v.id, v.fecha_programada::date AS fecha, v.estado, v.tecnico_id, v.supervisor_id, v.cliente_id
FROM semvis_sk.visita v;

-- ===== Seeds =====
INSERT INTO semvis_sk.role (nombre) VALUES ('ADMIN'),('SUPERVISOR'),('TECNICO'),('CLIENTE')
ON CONFLICT (nombre) DO NOTHING;

INSERT INTO semvis_sk."user" (username, email, pass_hash, primer_nombre, segundo_nombre, apellido1, estado)
VALUES
 ('admin','admin@demo.com','$2a$10$REEMPLAZA_HASH_BCRYPT','Admin',NULL,'Demo',TRUE),
 ('super','super@demo.com','$2a$10$REEMPLAZA_HASH_BCRYPT','Super',NULL,'Visitas',TRUE),
 ('tecnico','tecnico@demo.com','$2a$10$REEMPLAZA_HASH_BCRYPT','Tecnico',NULL,'Campo',TRUE),
 ('cliente','cliente@demo.com','$2a$10$REEMPLAZA_HASH_BCRYPT','Cliente',NULL,'Ejemplo',TRUE)
ON CONFLICT (email) DO NOTHING;

INSERT INTO semvis_sk.user_role (user_id, role)
SELECT id, 'ADMIN'::semvis_sk.role_name FROM semvis_sk."user" WHERE username='admin'
ON CONFLICT DO NOTHING;
INSERT INTO semvis_sk.user_role (user_id, role)
SELECT id, 'SUPERVISOR'::semvis_sk.role_name FROM semvis_sk."user" WHERE username='super'
ON CONFLICT DO NOTHING;
INSERT INTO semvis_sk.user_role (user_id, role)
SELECT id, 'TECNICO'::semvis_sk.role_name FROM semvis_sk."user" WHERE username='tecnico'
ON CONFLICT DO NOTHING;
INSERT INTO semvis_sk.user_role (user_id, role)
SELECT id, 'CLIENTE'::semvis_sk.role_name FROM semvis_sk."user" WHERE username='cliente'
ON CONFLICT DO NOTHING;

-- Departamentos (22)
INSERT INTO semvis_sk.departamento (nombre) VALUES
 ('Alta Verapaz'),('Baja Verapaz'),('Chimaltenango'),('Chiquimula'),
 ('El Progreso'),('Escuintla'),('Guatemala'),('Huehuetenango'),
 ('Izabal'),('Jalapa'),('Jutiapa'),('Petén'),
 ('Quetzaltenango'),('Quiché'),('Retalhuleu'),('Sacatepéquez'),
 ('San Marcos'),('Santa Rosa'),('Sololá'),('Suchitepéquez'),
 ('Totonicapán'),('Zacapa')
ON CONFLICT (nombre) DO NOTHING;

-- Municipios ejemplo
INSERT INTO semvis_sk.municipio (departamento_id, nombre)
SELECT d.id, m.nombre
FROM (VALUES
  ('Guatemala','Guatemala'),
  ('Guatemala','Mixco'),
  ('Guatemala','Villa Nueva'),
  ('Guatemala','San Miguel Petapa'),
  ('Guatemala','Villa Canales'),
  ('Guatemala','Santa Catarina Pinula'),
  ('Guatemala','Fraijanes'),
  ('Guatemala','Amatitlán')
) AS m(dep, nombre)
JOIN semvis_sk.departamento d ON d.nombre = m.dep
ON CONFLICT (departamento_id, nombre) DO NOTHING;

